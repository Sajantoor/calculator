{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleClick","bind","clear","calculate","state","content","calculated","className","this","onClick","e","num","currentTarget","innerHTML","trim","operations","includes","length","match","setState","str","calc","replace","eval","toString","error","React","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4/CAGMA,I,2BACJ,aAAYC,GAAQ,IAAD,qLACjB,mWAAMA,KAEDC,YAAc,EAAKA,YAAYC,KAAjB,4KACnB,EAAKC,MAAQ,EAAKA,MAAMD,KAAX,4KACb,EAAKE,UAAY,EAAKA,UAAUF,KAAf,4KAEjB,EAAKG,MAAQ,CACXC,QAAS,IACTC,YAAY,GATG,E,0XAaT,IAAD,OACP,OACE,kEAAKC,UAAU,OACb,iEAAIA,UAAU,WAAd,IAA0BC,KAAKJ,MAAMC,QAArC,KAEA,kEAAKE,UAAU,QACb,kEAAKA,UAAU,WACb,qEAAQE,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAzC,OACA,qEAAQD,QAASD,KAAKN,OAAtB,SAGF,kEAAKK,UAAU,cACb,qEAAQA,UAAU,eAAeE,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAlE,OACA,qEAAQH,UAAU,eAAeE,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAlE,OACA,qEAAQH,UAAU,eAAeE,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAlE,OACA,qEAAQH,UAAU,eAAeE,QAAS,SAACC,GAAD,OAAO,EAAKV,YAAYU,KAAlE,UACA,qEAAQH,UAAU,eAAeE,QAASD,KAAKL,WAA/C,Y,kCAOEO,GACV,IAAIC,EAAMD,EAAEE,cAAcC,UAAUC,OAChCT,EAAUG,KAAKJ,MAAMC,QACrBU,EAAa,YAGL,MAARJ,GAAeN,EAAQW,SAAS,OAIhBX,EAAQA,EAAQY,OAAQ,GAE1BC,MAAMH,IAAeJ,EAAIO,MAAMH,KAIjC,MAAZV,EACU,MAARM,EACFH,KAAKW,SAAS,CAACd,QAAS,IAAMM,IAE9BH,KAAKW,SAAS,CAACd,QAASM,IAI1BH,KAAKW,SAAS,CAACd,QAASA,EAAUM,Q,8BAKpCH,KAAKW,SAAS,CAACd,QAAS,Q,4CAIxB,IAAIe,IAAMZ,KAAKJ,MAAMC,QASjBgB,KARAD,IAAIJ,SAAS,OACfI,IAAMA,IAAIE,QAAQ,KAAM,MAGtBF,IAAIJ,SAAS,UACfI,IAAMA,IAAIE,QAAQ,QAAM,MAK1B,IACED,KAAOE,KAAKH,KACZC,KAAOA,KAAKG,WACZ,MAAOC,OACPJ,KAAO,QAGTb,KAAKW,SAAS,CAACd,QAASgB,KAAMf,YAAY,Q,KAlG5BoB,6CAAMC,WAsGT7B,2B,qKC7FK8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2DCZNc,IAASC,OAAO,kBAACnC,EAAA,EAAD,MAASoC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.01355e40.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClick = this.handleClick.bind(this);\n    this.clear = this.clear.bind(this);\n    this.calculate = this.calculate.bind(this);\n\n    this.state = {\n      content: \"0\",\n      calculated: false,\n    }\n  }\n\n  render() {\n    return(\n      <div className=\"App\">\n        <h1 className=\"display\"> {this.state.content} </h1>\n\n        <div className=\"keys\">\n          <div className=\"numbers\">\n            <button onClick={(e) => this.handleClick(e)}> 7 </button>\n            <button onClick={(e) => this.handleClick(e)}> 8 </button>\n            <button onClick={(e) => this.handleClick(e)}> 9 </button>\n            <button onClick={(e) => this.handleClick(e)}> 4 </button>\n            <button onClick={(e) => this.handleClick(e)}> 5 </button>\n            <button onClick={(e) => this.handleClick(e)}> 6 </button>\n            <button onClick={(e) => this.handleClick(e)}> 1 </button>\n            <button onClick={(e) => this.handleClick(e)}> 2 </button>\n            <button onClick={(e) => this.handleClick(e)}> 3 </button>\n            <button onClick={(e) => this.handleClick(e)}> . </button>\n            <button onClick={(e) => this.handleClick(e)}> 0 </button>\n            <button onClick={this.clear}> AC </button>\n          </div>\n\n          <div className=\"operations\">\n            <button className=\"operatorKeys\" onClick={(e) => this.handleClick(e)}> + </button>\n            <button className=\"operatorKeys\" onClick={(e) => this.handleClick(e)}> - </button>\n            <button className=\"operatorKeys\" onClick={(e) => this.handleClick(e)}> x </button>\n            <button className=\"operatorKeys\" onClick={(e) => this.handleClick(e)}> รท </button>\n            <button className=\"operatorKeys\" onClick={this.calculate}> = </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  handleClick(e) {\n    let num = e.currentTarget.innerHTML.trim();\n    let content = this.state.content;\n    let operations = /[+รทx-]/;\n\n    // multiple decimal check\n    if (num === \".\" && content.includes('.')) {\n      return;\n    }\n\n    let lastCharacter = content[content.length -1];\n\n    if (lastCharacter.match(operations) && num.match(operations)) {\n      return;\n    }\n\n    if (content === \"0\") {\n      if (num === \".\") {\n        this.setState({content: \"0\" + num});\n      } else {\n        this.setState({content: num});\n      }\n\n    } else {\n      this.setState({content: content + num});\n    }\n  }\n\n  clear() {\n    this.setState({content: \"0\"});\n  }\n\n  calculate() {\n    let str = this.state.content;\n    if (str.includes('x')) {\n      str = str.replace(/x/g, '*');\n    }\n\n    if (str.includes('รท')) {\n      str = str.replace(/รท/g, '/');\n    }\n\n    let calc;\n\n    try {\n      calc = eval(str)\n      calc = calc.toString();\n    } catch (error) {\n      calc = \"Error\";\n    }\n\n    this.setState({content: calc, calculated: true});\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}